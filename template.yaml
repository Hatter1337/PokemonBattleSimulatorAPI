AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for Pokemon Battle Simulator

Parameters:
  Env:
    Description: Deploying environment
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod

Conditions:
  IsProductionEnv: !Equals [!Ref Env, prod]

Mappings:
  EnvironmentSettings:
    prod:
      LogRetentionInDays: 90 # 3 months
    dev:
      LogRetentionInDays: 14 # 2 weeks

Globals:
  Api:
    OpenApiVersion: 3.0.1
  Function:
    Runtime: python3.12
    MemorySize: 128
    Timeout: 15
    Architectures:
      - x86_64
    Environment:
      Variables:
        ENVIRONMENT: !Ref Env

Resources:
  # --------------------------------------------------------------------- Lambda Layers
  PowertoolsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: "ede-demo-powertools-lambda-layer"
      Description: "Lambda Layer with Powertools developer toolkit"
      ContentUri: src/layers/powertools_layer/
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.12

  DataLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: "ede-demo-data-lambda-layer"
      Description: "Lambda Layer provides utils for data processing & caching solution"
      ContentUri: src/layers/data_layer/
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.12

  # --------------------------------------------------------------------- Service APIs (ApiGateway)
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayLoggingRole.Arn

  ApiGatewayLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  PokemonBattleSimulatorApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "ede-demo-pokemon-battle-simulator-api-${Env}"
      StageName: !If [IsProductionEnv, "api", !Sub "${Env}-api"]
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        UsagePlan:
          CreateUsagePlan: PER_API
          UsagePlanName:
            !Join ["", [{ "Ref": "AWS::StackName" }, "-usage-plan"]]
          Quota:
            Limit: 1000
            Period: DAY

  PokemonBattleSimulatorApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/${PokemonBattleSimulatorApi}"
      RetentionInDays:
        !FindInMap [EnvironmentSettings, !Ref Env, LogRetentionInDays]

  # --------------------------------------------------------------------- S3 Bucket(s)
  PokemonS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "ede-demo-pokemon-${AWS::AccountId}-bucket"

  AllowS3ToCallLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref PokemonS3TriggerLambdaFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt PokemonS3Bucket.Arn

  # --------------------------------------------------------------------- SQS Queue(s)
  PokemonDLFifoQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "ede-demo-pokemon-dl-queue-${Env}.fifo"
      FifoQueue: true
      MessageRetentionPeriod: 1209600 # (14 days) Time messages are kept in queue before deletion

  PokemonFifoQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "ede-demo-pokemon-queue-${Env}.fifo"
      FifoQueue: true
      ContentBasedDeduplication: true
      MessageRetentionPeriod: 86400 # (24 hours) Time messages are kept in queue before deletion
      VisibilityTimeout: 15 # (15 seconds) Time message is invisible in the queue after retrieval
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt PokemonDLFifoQueue.Arn
        maxReceiveCount: 3 # Number of retries before moving a message to DLQueue

  # --------------------------------------------------------------------- Lambda Role(s)
  BaseLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "ede-demo-base-lambda-execution-role-${Env}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub "ede-demo-base-lambda-execution-policy-${Env}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # DynamoDB tables for Pokemon Battle Simulator
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ede-demo-pokemon"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ede-demo-battle"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ede-demo-battle/index/*"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ede-demo-battle/stream/*"
              # SQS Queues for Pokemon Battle Simulator
              - Effect: Allow
                Action:
                  - "sqs:SendMessage"
                  - "sqs:GetQueueAttributes"
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                Resource:
                  - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:ede-demo-pokemon-queue-${Env}.fifo"

  # --------------------------------------------------------------------- Lambda functions - API Handlers
  PokemonMirrorApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "ede-demo-pokemon-mirror-api-fn-${Env}"
      CodeUri: src/lambda/functions/api_mirror/
      Handler: handler.lambda_handler
      Role: !GetAtt BaseLambdaExecutionRole.Arn
      Layers:
        - !Ref DataLayer
      Events:
        FetchPokemonData:
          Type: Api
          Properties:
            RestApiId: !Ref PokemonBattleSimulatorApi
            Path: /mirror/pokemon/{pokemon_id}
            Method: GET

  PokemonMirrorApiFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/ede-demo-pokemon-mirror-api-fn-${Env}"
      RetentionInDays:
        !FindInMap [EnvironmentSettings, !Ref Env, LogRetentionInDays]

  PokemonDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "ede-demo-pokemon-data-fn-${Env}"
      CodeUri: src/lambda/functions/api_pokemon/
      Handler: handler.lambda_handler
      Role: !GetAtt BaseLambdaExecutionRole.Arn
      Layers:
        - !Ref PowertoolsLayer
        - !Ref DataLayer
      Events:
        FetchPokemonData:
          Type: Api
          Properties:
            RestApiId: !Ref PokemonBattleSimulatorApi
            Path: /v1/pokemon/{pokemon_id}
            Method: GET
            Auth:
              ApiKeyRequired: true

  PokemonDataFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/ede-demo-pokemon-data-fn-${Env}"
      RetentionInDays:
        !FindInMap [EnvironmentSettings, !Ref Env, LogRetentionInDays]

  PokemonBattleSimulatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "ede-demo-pokemon-battle-simulator-fn-${Env}"
      CodeUri: src/lambda/functions/api_battle
      Handler: handler.lambda_handler
      Role: !GetAtt BaseLambdaExecutionRole.Arn
      Layers:
        - !Ref PowertoolsLayer
        - !Ref DataLayer
      # AutoPublishAlias: live
      # ProvisionedConcurrencyConfig:
      #   ProvisionedConcurrentExecutions: !If [IsProductionEnv, 3, 1]
      Events:
        GenerateBattle:
          Type: Api
          Properties:
            RestApiId: !Ref PokemonBattleSimulatorApi
            Path: /v1/battle
            Method: POST
            Auth:
              ApiKeyRequired: true
        FetchBattleData:
          Type: Api
          Properties:
            RestApiId: !Ref PokemonBattleSimulatorApi
            Path: /v1/battle/{battle_id}
            Method: GET
            Auth:
              ApiKeyRequired: true
        SearchBattlesByWinner:
          Type: Api
          Properties:
            RestApiId: !Ref PokemonBattleSimulatorApi
            Path: /v1/battle/search_by_winner/{name}
            Method: GET
            Auth:
              ApiKeyRequired: true

  PokemonBattleSimulatorFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/ede-demo-pokemon-battle-simulator-fn-${Env}"
      RetentionInDays:
        !FindInMap [EnvironmentSettings, !Ref Env, LogRetentionInDays]

  # --------------------------------------------------------------------- Lambda functions - S3 Event Handlers
  PokemonS3TriggerLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "ede-demo-pokemon-s3-trigger-fn-${Env}"
      CodeUri: src/lambda/functions/s3_trigger/
      Handler: handler.lambda_handler
      Role: !GetAtt BaseLambdaExecutionRole.Arn
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref PokemonS3Bucket
      Events:
        S3PutObject:
          Type: S3
          Properties:
            Bucket: !Ref PokemonS3Bucket
            Events: s3:ObjectCreated:*

  PokemonS3TriggerLambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/ede-demo-pokemon-s3-trigger-fn-${Env}"
      RetentionInDays:
        !FindInMap [EnvironmentSettings, !Ref Env, LogRetentionInDays]

  # ----------------------------------------------------------------- Lambda functions - DynamoDB Stream Event Handlers
  PokemonDynamoDBTriggerLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "ede-demo-pokemon-dynamodb-trigger-fn-${Env}"
      CodeUri: src/lambda/functions/dynamodb_trigger/
      Handler: handler.lambda_handler
      Role: !GetAtt BaseLambdaExecutionRole.Arn
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref PokemonS3Bucket
      Events:
        DynamoDBTrigger:
          Type: DynamoDB
          Properties:
            Stream: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ede-demo-battle/stream/2024-08-12T20:35:30.567"
            BatchSize: 100
            StartingPosition: LATEST

  PokemonDynamoDBTriggerLambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/ede-demo-pokemon-dynamodb-trigger-fn-${Env}"
      RetentionInDays:
        !FindInMap [ EnvironmentSettings, !Ref Env, LogRetentionInDays ]

  # ----------------------------------------------------------------------------- Lambda functions - SQS Event Handlers
  PokemonSQSTriggerLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "ede-demo-pokemon-sqs-trigger-fn-${Env}"
      CodeUri: src/lambda/functions/sqs_trigger/
      Handler: handler.lambda_handler
      Role: !GetAtt BaseLambdaExecutionRole.Arn
      Environment:
        Variables:
          SQS_QUEUE_URL: !Sub "https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/ede-demo-pokemon-queue-${Env}.fifo"
      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt PokemonFifoQueue.Arn
            Enabled: true
            BatchSize: 1

  PokemonSQSTriggerLambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/ede-demo-pokemon-sqs-trigger-fn-${Env}"
      RetentionInDays:
        !FindInMap [ EnvironmentSettings, !Ref Env, LogRetentionInDays ]


Outputs:
  PokemonBattleSimulatorApiUrlOutput:
    Description: "URL of the Pokemon Battle Simulator API"
    Value: !If
      - IsProductionEnv
      - !Sub "https://${PokemonBattleSimulatorApi}.execute-api.${AWS::Region}.amazonaws.com/api/"
      - !Sub "https://${PokemonBattleSimulatorApi}.execute-api.${AWS::Region}.amazonaws.com/${Env}-api/"
