AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for Pokemon Battle Simulator

Parameters:
  Env:
    Description: Deploying environment
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod

Conditions:
  IsProductionEnv: !Equals [!Ref Env, prod]

Mappings:
  EnvironmentSettings:
    prod:
      LogRetentionInDays: 90 # 3 months
    dev:
      LogRetentionInDays: 14 # 2 weeks

Globals:
  Api:
    OpenApiVersion: 3.0.1
  Function:
    Runtime: python3.12
    MemorySize: 128
    Timeout: 15
    Architectures:
      - x86_64
    Environment:
      Variables:
        ENVIRONMENT: !Ref Env

Resources:
  # --------------------------------------------------------------------- Lambda Layers
  PowertoolsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: powertools-lambda-layer
      Description: "Lambda Layer with Powertools developer toolkit"
      ContentUri: src/layers/powertools_layer/
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.12

  DataLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: data-lambda-layer
      Description: "Lambda Layer provides utils for data processing & caching solution"
      ContentUri: src/layers/data_layer/
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.12

  # --------------------------------------------------------------------- Service APIs (ApiGateway)
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayLoggingRole.Arn

  ApiGatewayLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  PokemonBattleSimulatorApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "Pokemon-Battle-Simulator-API-${Env}"
      StageName: !If [IsProductionEnv, "api", !Sub "${Env}-api"]
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        UsagePlan:
          CreateUsagePlan: PER_API
          UsagePlanName:
            !Join ["", [{ "Ref": "AWS::StackName" }, "-usage-plan"]]
          Quota:
            Limit: 1000
            Period: DAY

  PokemonBattleSimulatorApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/${PokemonBattleSimulatorApi}"
      RetentionInDays:
        !FindInMap [EnvironmentSettings, !Ref Env, LogRetentionInDays]

  # --------------------------------------------------------------------- Lambda Role(s)
  BaseLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "base-lambda-execution-role-${Env}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaS3DynamoDBCloudWatchPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # DynamoDB tables for Pokemon Battle Simulator
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ede-demo-pokemon"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ede-demo-battle"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ede-demo-battle/index/*"

  # --------------------------------------------------------------------- Lambda functions
  PokemonMirrorApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "pokemon-mirror-api-fn-${Env}"
      CodeUri: src/lambda/functions/api_mirror/
      Handler: handler.lambda_handler
      Role: !GetAtt BaseLambdaExecutionRole.Arn
      Layers:
        - !Ref DataLayer
      Events:
        FetchPokemonData:
          Type: Api
          Properties:
            RestApiId: !Ref PokemonBattleSimulatorApi
            Path: /mirror/pokemon/{pokemon_id}
            Method: GET

  PokemonMirrorApiFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/pokemon-mirror-api-fn-${Env}"
      RetentionInDays:
        !FindInMap [EnvironmentSettings, !Ref Env, LogRetentionInDays]

  PokemonDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "pokemon-battle-simulator-pokemon-data-fn-${Env}"
      CodeUri: src/lambda/functions/api_pokemon/
      Handler: handler.lambda_handler
      Role: !GetAtt BaseLambdaExecutionRole.Arn
      Layers:
        - !Ref PowertoolsLayer
        - !Ref DataLayer
      # AutoPublishAlias: live
      # ProvisionedConcurrencyConfig:
      #   ProvisionedConcurrentExecutions: !If [IsProductionEnv, 3, 1]
      Events:
        FetchPokemonData:
          Type: Api
          Properties:
            RestApiId: !Ref PokemonBattleSimulatorApi
            Path: /v1/pokemon/{pokemon_id}
            Method: GET
            Auth:
              ApiKeyRequired: true

  PokemonDataFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/pokemon-battle-simulator-pokemon-data-fn-${Env}"
      RetentionInDays:
        !FindInMap [EnvironmentSettings, !Ref Env, LogRetentionInDays]

  BattleDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "pokemon-battle-simulator-battle-data-fn-${Env}"
      CodeUri: src/lambda/functions/api_battle
      Handler: handler.lambda_handler
      Role: !GetAtt BaseLambdaExecutionRole.Arn
      Layers:
        - !Ref PowertoolsLayer
        - !Ref DataLayer
      # AutoPublishAlias: live
      # ProvisionedConcurrencyConfig:
      #   ProvisionedConcurrentExecutions: !If [IsProductionEnv, 3, 1]
      Events:
        GenerateBattle:
          Type: Api
          Properties:
            RestApiId: !Ref PokemonBattleSimulatorApi
            Path: /v1/battle
            Method: POST
            Auth:
              ApiKeyRequired: true
        FetchBattleData:
          Type: Api
          Properties:
            RestApiId: !Ref PokemonBattleSimulatorApi
            Path: /v1/battle/{battle_id}
            Method: GET
            Auth:
              ApiKeyRequired: true
        SearchBattlesByWinner:
          Type: Api
          Properties:
            RestApiId: !Ref PokemonBattleSimulatorApi
            Path: /v1/battle/search_by_winner/{name}
            Method: GET
            Auth:
              ApiKeyRequired: true

  BattleDataFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/pokemon-battle-simulator-battle-data-fn-${Env}"
      RetentionInDays:
        !FindInMap [EnvironmentSettings, !Ref Env, LogRetentionInDays]

Outputs:
  PokemonBattleSimulatorApiUrlOutput:
    Description: "URL of the Pokemon Battle Simulator API"
    Value: !If
      - IsProductionEnv
      - !Sub "https://${PokemonBattleSimulatorApi}.execute-api.${AWS::Region}.amazonaws.com/api/"
      - !Sub "https://${PokemonBattleSimulatorApi}.execute-api.${AWS::Region}.amazonaws.com/${Env}-api/"
